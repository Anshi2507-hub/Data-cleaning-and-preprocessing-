# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126LraE3sikqUYkrtvhM-pZlpm3R2QUxB
"""

# Import pandas library
import pandas as pd

# Load the Titanic dataset from a public URL
df = pd.read_csv('https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv')

# Display the first 5 rows to check if it loaded correctly
print(df.head())

# Check for basic info like data types and non-null values
print(df.info())

# Check for the number of missing values in each column
print(df.isnull().sum())

# Handle missing values for 'Age' column
df['Age'].fillna(df['Age'].median(), inplace=True)

# Handle missing values for 'Embarked' column
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

# Drop 'Cabin' column due to a large number of missing values
df.drop('Cabin', axis=1, inplace=True)

# Verify that there are no more missing values
print(df.isnull().sum())

# Convert 'Sex' using label encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Sex'] = le.fit_transform(df['Sex'])

# Convert 'Embarked' using one-hot encoding
df = pd.get_dummies(df, columns=['Embarked'], drop_first=True)

# Display the updated dataframe to see the changes
print(df.head())

import seaborn as sns
import matplotlib.pyplot as plt

# Visualize outliers using a boxplot for 'Fare'
sns.boxplot(x=df['Fare'])
plt.show()

# To remove outliers, we can use the Interquartile Range (IQR) method
Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Remove outliers from the dataframe
df = df[(df['Fare'] >= lower_bound) & (df['Fare'] <= upper_bound)]

# Visualize the data again to check
sns.boxplot(x=df['Fare'])
plt.show()

print(df.shape)

from sklearn.preprocessing import StandardScaler

# Select numerical features to scale
numerical_features = ['Age', 'Fare', 'Pclass', 'SibSp', 'Parch']

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the data
df[numerical_features] = scaler.fit_transform(df[numerical_features])

# Display the scaled data
print(df.head())